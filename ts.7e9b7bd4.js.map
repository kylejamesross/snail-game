{"version":3,"sources":["ts/constants.ts","../.history/src/ts/utils_20200701140937.ts","ts/utils.ts","ts/buttons.ts","ts/ui.ts","ts/GameStates.ts","ts/gameState.ts","ts/index.ts"],"names":[],"mappings":"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","file":"ts.7e9b7bd4.js","sourceRoot":"..\\src","sourcesContent":["export const TICK_RATE = 3000;\nexport const ICONS = [\"fish\", \"poop\", \"weather\"];\nexport const RAIN_CHANCE = 0.2;\nexport const SCENES = [\"day\", \"raining\"];\nexport const DAY_LENGTH = 30;\nexport const NIGHT_LENGTH = 3;\n\nexport const getNextHungerTime = (clock: number): number =>\n  Math.floor(Math.random() * 1) + 8 + clock;\n\nexport const getNextDieTime = (clock: number): number =>\n  Math.floor(Math.random() * 3) + 5 + clock;\n\nexport const getNextPoopTime = (clock: number): number =>\n  Math.floor(Math.random() * 2) + 8 + clock;\n","export const createElementAndAddClickEventListener = (\n  className: string,\n  listener: () => void\n): void => {\n  const element = document!.querySelector(className);\n  if (element) {\n    element.addEventListener(\"click\", listener);\n  }\n};\n\nexport const toggleClassOnElement = (\n  ElementClassName: string,\n  classNameToToggle: string\n): void => {\n  const element = document!.querySelector(ElementClassName);\n  if (element) {\n    const classList = element.classList;\n    classList.toggle(classNameToToggle);\n  }\n};\n","export const createElementAndAddClickEventListener = (\n  className: string,\n  listener: () => void\n): void => {\n  const element = document!.querySelector(className);\n  if (element) {\n    element.addEventListener(\"click\", listener);\n  }\n};\n\nexport const toggleClassOnElement = (\n  ElementClassName: string,\n  classNameToToggle: string,\n  force?: boolean\n): void => {\n  const element = document!.querySelector(ElementClassName);\n  if (element) {\n    const classList = element.classList;\n    classList.toggle(classNameToToggle, force);\n  }\n};\n","import { toggleClassOnElement } from \"./../../.history/src/ts/utils_20200701140937\";\nimport { createElementAndAddClickEventListener } from \"./utils\";\nimport GameState from \"./gameState\";\n\nexport default function initializeButtons(gameState: GameState): void {\n  createElementAndAddClickEventListener(\".start-button\", startButtonClick);\n  createElementAndAddClickEventListener(\".restart-button\", restartButtonClick);\n  createElementAndAddClickEventListener(\".feed-control\", feedButtonClick);\n  createElementAndAddClickEventListener(\n    \".environment-control\",\n    environmentButtonClick\n  );\n  createElementAndAddClickEventListener(\".poop-control\", poopButtonClick);\n\n  function startButtonClick() {\n    toggleClassOnElement(\".game-screen\", \"start-menu\");\n    gameState.startGame();\n  }\n\n  function restartButtonClick() {\n    toggleClassOnElement(\".game-screen\", \"death-menu\");\n    gameState.startGame();\n  }\n\n  function feedButtonClick() {\n    gameState.feed();\n  }\n\n  function environmentButtonClick() {\n    gameState.changeWeather();\n  }\n\n  function poopButtonClick() {\n    gameState.cleanUpPoop();\n  }\n}\n","import { RAIN_CHANCE, SCENES } from \"./constants\";\nimport { toggleClassOnElement } from \"./utils\";\n\nexport function modSnail(state: string) {\n  const element = document.querySelector<HTMLElement>(\".snail\");\n  if (element) {\n    element.className = `snail ${state}`;\n  }\n}\n\nexport function modScene(state: string) {\n  const element = document.querySelector(\".game-screen\");\n\n  if (element) {\n    const classList = element.classList;\n    const existingScene = [...classList].find((className: string) =>\n      className.startsWith(\"scene-\")\n    );\n    if (existingScene) {\n      classList.toggle(existingScene, false);\n    }\n    classList.toggle(`scene-${state}`, true);\n  }\n}\n\nexport function modEnvironmentButton(state: string) {\n  const inverted = state === \"raining\" ? \"day\" : \"raining\";\n  toggleClassOnElement(\".environment-control\", inverted, true);\n  toggleClassOnElement(\".environment-control\", state, false);\n}\n\nexport function togglePoopPile(show: boolean) {\n  const element = document.querySelector<HTMLElement>(\".poop-pile\");\n  if (element) {\n    element.classList.toggle(\"hidden\", !show);\n  }\n}\n","enum GameStates {\n  INIT = 0,\n  HATCHING = 1,\n  IDLING = 3,\n  SLEEP = 4,\n  FEEDING = 5,\n  CELEBRATING = 6,\n  POOPING = 7,\n  DEAD = 8,\n  HUNGRY = 9,\n  POOPED = 9,\n}\n\nexport default GameStates;\n","import { modSnail, modScene, togglePoopPile, modEnvironmentButton } from \"./ui\";\nimport {\n  SCENES,\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  getNextDieTime,\n  getNextHungerTime,\n  getNextPoopTime,\n  RAIN_CHANCE,\n} from \"./constants\";\nimport GameStates from \"./GameStates\";\nimport { toggleClassOnElement } from \"./utils\";\n\nclass GameState {\n  public current: GameStates;\n\n  private clock: number;\n\n  private sleepTime: number;\n\n  private hungryTime: number;\n\n  private dieTime: number;\n\n  private timeToStartCelebrating: number;\n\n  private timeToEndCelebrating: number;\n\n  private timeToStartPooping: number;\n\n  private timeToEndPooping: number;\n\n  private wakeTime: number;\n\n  private scene: number;\n\n  constructor() {\n    this.current = GameStates.INIT;\n    this.clock = 1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.timeToStartPooping = -1;\n    this.timeToEndPooping = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n    this.wakeTime = -1;\n    this.scene = 0;\n  }\n\n  public clearTimes() {\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.timeToStartPooping = -1;\n    this.timeToEndPooping = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n    this.wakeTime = -1;\n  }\n\n  public startGame() {\n    this.current = GameStates.IDLING;\n    this.scene = Math.random() > RAIN_CHANCE ? 0 : 1;\n    modScene(SCENES[this.scene]);\n    toggleClassOnElement(\".feed-control\", \"warning\", false);\n    toggleClassOnElement(\".poop-control\", \"warning\", false);\n    modEnvironmentButton(SCENES[this.scene]);\n    modSnail(\"\");\n    this.sleepTime = this.clock + DAY_LENGTH;\n    this.hungryTime = getNextHungerTime(this.clock);\n  }\n\n  public tick() {\n    this.clock++;\n\n    switch (this.clock) {\n      case this.hungryTime:\n        this.getHungry();\n        break;\n      case this.dieTime:\n        this.die();\n        break;\n      case this.timeToStartCelebrating:\n        this.startCelebrating();\n        break;\n      case this.timeToEndCelebrating:\n        this.endCelebrating();\n        break;\n      case this.timeToStartPooping:\n        this.startPooping();\n        break;\n      case this.timeToEndPooping:\n        this.endPooping();\n        break;\n      case this.sleepTime:\n        this.sleep();\n        break;\n      case this.wakeTime:\n        this.wake();\n        break;\n    }\n  }\n\n  public changeWeather() {\n    if (this.current !== GameStates.SLEEP) {\n      this.scene = (this.scene + 1) % SCENES.length;\n      modScene(SCENES[this.scene]);\n      modEnvironmentButton(SCENES[this.scene]);\n    }\n  }\n\n  public cleanUpPoop() {\n    if (this.current === GameStates.POOPED) {\n      this.dieTime = -1;\n      togglePoopPile(false);\n      this.hungryTime = getNextHungerTime(this.clock);\n      toggleClassOnElement(\".poop-control\", \"warning\", false);\n    }\n  }\n\n  public sleep() {\n    this.current = GameStates.SLEEP;\n    modSnail(\"sleeping\");\n    modScene(\"night\");\n    this.clearTimes();\n    toggleClassOnElement(\".feed-control\", \"warning\", false);\n    toggleClassOnElement(\".poop-control\", \"warning\", false);\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  }\n\n  public wake() {\n    this.startGame();\n  }\n\n  public getHungry() {\n    this.current = GameStates.HUNGRY;\n    this.dieTime = getNextDieTime(this.clock);\n    this.hungryTime = -1;\n    toggleClassOnElement(\".feed-control\", \"warning\", true);\n    modSnail(\"hungry\");\n  }\n\n  public die() {\n    this.current = GameStates.DEAD;\n    modSnail(\"dead\");\n    this.clearTimes();\n    toggleClassOnElement(\".game-screen\", \"death-menu\");\n  }\n\n  public startPooping() {\n    this.current = GameStates.POOPING;\n    this.timeToStartPooping = -1;\n    this.timeToEndPooping = this.clock + 4;\n    modSnail(\"pooping\");\n  }\n\n  public endPooping() {\n    this.current = GameStates.POOPED;\n    this.timeToEndPooping = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    toggleClassOnElement(\".poop-control\", \"warning\", true);\n    togglePoopPile(true);\n    modSnail(\"\");\n  }\n\n  public startCelebrating() {\n    this.current = GameStates.CELEBRATING;\n    modSnail(\"celebrate\");\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = this.clock + 2;\n  }\n\n  public endCelebrating() {\n    this.timeToStartCelebrating = -1;\n    this.timeToStartPooping = getNextPoopTime(this.clock);\n    this.current = GameStates.IDLING;\n    modSnail(\"\");\n  }\n\n  public feed() {\n    if (this.current !== GameStates.HUNGRY) {\n      return;\n    }\n    this.current = GameStates.FEEDING;\n    this.dieTime = -1;\n    modSnail(\"eating\");\n    toggleClassOnElement(\".feed-control\", \"warning\", false);\n    this.timeToStartCelebrating = this.clock + 2;\n  }\n}\n\nexport default GameState;\n","import { TICK_RATE } from \"./constants\";\nimport initButtons from \"./buttons\";\nimport GameState from \"./gameState\";\n\n(async function initialize() {\n  const gameState = new GameState();\n  initButtons(gameState);\n\n  let nextTimeToTick = Date.now();\n\n  function nextAnimationFrame() {\n    const now = Date.now();\n    if (nextTimeToTick <= now) {\n      gameState.tick();\n      nextTimeToTick = now + TICK_RATE;\n    }\n\n    requestAnimationFrame(nextAnimationFrame);\n  }\n\n  nextAnimationFrame();\n})();\n"]}